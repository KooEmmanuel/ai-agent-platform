"""add_password_reset_fields

Revision ID: 0d18e5f9da75
Revises: f208e3413f3c
Create Date: 2025-10-05 20:30:20.021394

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0d18e5f9da75'
down_revision = 'f208e3413f3c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_files_agent_id', table_name='user_files')
    op.drop_index('ix_user_files_id', table_name='user_files')
    op.drop_index('ix_user_files_user_id', table_name='user_files')
    op.drop_table('user_files')
    op.drop_index('ix_crawl_status_id', table_name='crawl_status')
    op.drop_table('crawl_status')
    op.drop_index('ix_file_folders_agent_id', table_name='file_folders')
    op.drop_index('ix_file_folders_id', table_name='file_folders')
    op.drop_index('ix_file_folders_parent_folder_id', table_name='file_folders')
    op.drop_index('ix_file_folders_user_id', table_name='file_folders')
    op.drop_table('file_folders')
    op.drop_index('ix_file_shares_file_id', table_name='file_shares')
    op.drop_index('ix_file_shares_id', table_name='file_shares')
    op.drop_index('ix_file_shares_owner_user_id', table_name='file_shares')
    op.drop_index('ix_file_shares_shared_with_user_id', table_name='file_shares')
    op.drop_table('file_shares')
    op.drop_index('ix_conversations_workspace_id', table_name='conversations')
    op.add_column('users', sa.Column('reset_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('reset_token_expires', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'reset_token_expires')
    op.drop_column('users', 'reset_token')
    op.create_index('ix_conversations_workspace_id', 'conversations', ['workspace_id'], unique=False)
    op.create_table('file_shares',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('owner_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('shared_with_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission', postgresql.ENUM('VIEW', 'EDIT', 'ADMIN', name='filepermission'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['user_files.id'], name='file_shares_file_id_fkey'),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], name='file_shares_owner_user_id_fkey'),
    sa.ForeignKeyConstraint(['shared_with_user_id'], ['users.id'], name='file_shares_shared_with_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='file_shares_pkey')
    )
    op.create_index('ix_file_shares_shared_with_user_id', 'file_shares', ['shared_with_user_id'], unique=False)
    op.create_index('ix_file_shares_owner_user_id', 'file_shares', ['owner_user_id'], unique=False)
    op.create_index('ix_file_shares_id', 'file_shares', ['id'], unique=False)
    op.create_index('ix_file_shares_file_id', 'file_shares', ['file_id'], unique=False)
    op.create_table('file_folders',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_folder_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name='file_folders_agent_id_fkey'),
    sa.ForeignKeyConstraint(['parent_folder_id'], ['file_folders.id'], name='file_folders_parent_folder_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='file_folders_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='file_folders_pkey')
    )
    op.create_index('ix_file_folders_user_id', 'file_folders', ['user_id'], unique=False)
    op.create_index('ix_file_folders_parent_folder_id', 'file_folders', ['parent_folder_id'], unique=False)
    op.create_index('ix_file_folders_id', 'file_folders', ['id'], unique=False)
    op.create_index('ix_file_folders_agent_id', 'file_folders', ['agent_id'], unique=False)
    op.create_table('crawl_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('collection_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('progress', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pages_discovered', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pages_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_pages', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['knowledge_base_collections.id'], name='crawl_status_collection_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='crawl_status_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='crawl_status_pkey')
    )
    op.create_index('ix_crawl_status_id', 'crawl_status', ['id'], unique=False)
    op.create_table('user_files',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('original_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('stored_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('blob_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('blob_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('file_extension', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('folder_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name='user_files_agent_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_files_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_files_pkey')
    )
    op.create_index('ix_user_files_user_id', 'user_files', ['user_id'], unique=False)
    op.create_index('ix_user_files_id', 'user_files', ['id'], unique=False)
    op.create_index('ix_user_files_agent_id', 'user_files', ['agent_id'], unique=False)
    # ### end Alembic commands ### 